#!groovy

import uk.gov.hmcts.contino.GithubAPI

@Library("Infrastructure")

def type = "angular"
def product = "jps"
def component = "judicial-payment-frontend"
def branchesToSync = ['demo', 'perftest', 'ithc']

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def secrets = [
  'jps-${env}': [
    secret('jps-s2s-client-secret', 'S2S_SECRET'),
    secret('jps-idam-client-secret', 'IDAM_SECRET'),
    secret('idam-jps-recorder-username', 'JPS_RECORDER_USERNAME'),
    secret('idam-jps-recorder-password', 'JPS_RECORDER_PASSWORD'),
    secret('idam-jps-submitter-username', 'JPS_SUBMITTER_USERNAME'),
    secret('idam-jps-submitter-password', 'JPS_SUBMITTER_PASSWORD'),
    secret('idam-jps-publisher-username', 'JPS_PUBLISHER_USERNAME'),
    secret('idam-jps-publisher-password', 'JPS_PUBLISHER_PASSWORD'),
    secret('idam-jps-admin-username', 'JPS_ADMIN_USERNAME'),
    secret('idam-jps-admin-password', 'JPS_ADMIN_PASSWORD'),
    secret('idam-jps-joh-admin-username', 'JPS_JOH_ADMIN_USERNAME'),
    secret('idam-jps-joh-admin-password', 'JPS_JOH_ADMIN_PASSWORD'),
    secret('idam-jps-invalid-username', 'JPS_INVALID_USERNAME'),
    secret('idam-jps-invalid-password', 'JPS_INVALID_PASSWORD')
  ],
]

def vaultOverrides = [
    'preview' : 'aat'
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [
    $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withPipeline(type, product, component) {
  overrideVaultEnvironments(vaultOverrides)
  loadVaultSecrets(secrets)
  enableAksStagingDeployment()

  afterAlways('build') {
    yarnBuilder.yarn('build')
  }

  afterAlways('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/functional-output/**/*'
  }

  afterAlways('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/functional-output/**/*'
  }
}
